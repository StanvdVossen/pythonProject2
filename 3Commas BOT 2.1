#3Commas BOT / 17 safety orders weergegeven in een range

import ccxt

# Function query account
exchange_id = 'bybit'
exchange_class = getattr(ccxt, exchange_id)
exchange = exchange_class({
    'apiKey': '',
    'secret': '',
    'options': {
        'defaultType': 'spot',
        'recvWindow': 5000,
        'createMarketBuyOrderRequiresPrice': False
    }
})

# Check if the API key is connected successfully
try:
    exchange.load_markets()
    print("API key connected successfully.")
except ccxt.AuthenticationError:
    print("Failed to connect API key. Please check your credentials.")
    exit()


# Check Spot Balance
def print_spot_balance():
    balance = exchange.fetch_balance()

    if 'total' in balance and 'USDT' in balance['total']:
        usdt_balance = balance['total']['USDT']
        print(f"Spot Balance (USDT): {usdt_balance}")
    else:
        print("Failed to fetch spot balance for USDT.")


print_spot_balance()

# Variable to define the current price
symbol = 'XRP/USDT'


# Show the current price of Symbol
def print_current_price():
    global symbol  # Explicitly specify the outer variable
    ticker = exchange.fetch_ticker(symbol)
    current_price_value = ticker['last']

    print(f"Current Price of {symbol}: {current_price_value}")


# Call the function
print_current_price()

# Define initial parameters
quantity = 1.0
safety_order_count = 17
price_deviation = -0.015
completed_orders = []
volume_scale = 0.012


# Function to place a buy order
def place_buy_order(amount):
    try:
        inner_buy_order = exchange.create_market_buy_order(
            symbol=symbol,
            amount=amount
        )
        return inner_buy_order
    except Exception as e:
        print("Error placing the buy order:", str(e))
        return None


# Place the buy order
buy_order = place_buy_order(quantity)

# Check if the buy order was successful
if buy_order is not None and isinstance(buy_order, dict) and 'info' in buy_order:
    print("Buy order filled successfully.")
    print(f"Price: {buy_order['price']}, Volume: {buy_order['amount']}")
else:
    error_message = (
        buy_order['info']['ret_msg']
        if isinstance(buy_order, dict) and 'info' in buy_order and 'ret_msg' in buy_order['info']
        else "Unknown error"
    )
    print(f"Error placing the buy order: {error_message}")


# Calculate the average entry position
def calculate_average_entry_position(orders):
    total_quantity = 0.0
    total_cost = 0.0

    for order in orders:
        total_quantity += order['amount']
        total_cost += order['cost']

    if total_quantity != 0:
        average_entry_position = total_cost / total_quantity
    else:
        average_entry_position = 0.0

    return average_entry_position


# Calculate the new position size
new_position_size = calculate_average_entry_position(completed_orders) * volume_scale

# Calculate the quantity for safety orders
safety_order_quantity = new_position_size * 1.2  # Volume scale for the safety orders


# Function to check if the take profit condition is met
def check_take_profit(average_position):
    if average_position == 0:
        return False
    
    atm_price = latest_ticker['last']
    profit_percentage = (atm_price - average_position) / average_position * 100

    if profit_percentage >= 1.3:
        return True
    else:
        return False


# Main loop to monitor price and place subsequent buy orders
while True:
    # Get the latest price
    latest_ticker = exchange.fetch_ticker(symbol)
    current_price = latest_ticker['last']

    # Check if the price dropped by the specified deviation
    if current_price < calculate_average_entry_position(completed_orders) + \
            (calculate_average_entry_position(completed_orders) * price_deviation):
        # Place the new buy order
        buy_order_result = place_buy_order(new_position_size)

        # Check if the buy order was successful
        if buy_order_result is not None and isinstance(buy_order_result, dict) and 'info' in buy_order_result:
            completed_orders.append(buy_order_result)
            print("Buy order filled successfully.")
            print(f"Price: {buy_order_result['price']}, Volume: {buy_order_result['amount']}")

            # Implement the safety orders
            for i in range(1, safety_order_count + 1):
                safety_order_result = place_buy_order(safety_order_quantity)

                if safety_order_result is not None and isinstance(safety_order_result,
                                                                  dict) and 'info' in safety_order_result:
                    completed_orders.append(safety_order_result)
                    print(f"{i}th safety order filled successfully.")
                    print(
                        f"Price: {safety_order_result['price']}, Volume: {safety_order_result['amount']}")
                else:
                    error_message = safety_order_result['info']['ret_msg'] if \
                        isinstance(safety_order_result, dict) and 'info' in safety_order_result and \
                        'ret_msg' in safety_order_result['info'] else "Unknown error"
                    print(f"Error placing the {i}th safety order: {error_message}")

    # Check if the take profit condition is met
    if check_take_profit(calculate_average_entry_position(completed_orders)):
        # Place the take profit order
        take_profit_order_result = place_buy_order(new_position_size)

        if take_profit_order_result is not None and isinstance(take_profit_order_result,
                                                               dict) and 'info' in take_profit_order_result:
            completed_orders.append(take_profit_order_result)
            print("Take profit order filled successfully.")
            print(
                f"Price: {take_profit_order_result['price']}, Volume: {take_profit_order_result['amount']}")
        else:
            error_message = take_profit_order_result['info']['ret_msg'] if \
                isinstance(take_profit_order_result, dict) and 'info' in take_profit_order_result and \
                'ret_msg' in take_profit_order_result['info'] else "Unknown error"
            print(f"Error placing the take profit order: {error_message}")
